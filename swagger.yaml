openapi: 3.0.0
info:
  title: User API
  description: API documentation for Users
  version: 1.0.0
paths:
  /:
    get:
      summary: Returns a greeting
      responses:
        200:
          description: Greeting response
          content:
            application/json:
              schema:
                type: string
                example: Hello World from Express and MongoDb!
  /users:
    get:
      summary: Returns all users
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                example: [{"_id": "679e989ab30d21c6a7218f67","firstName": "Robert","lastName": "Allen","birthDate": "05/22/1998","email": "rallen@yahoo.com", "height": 68,"weight": 170}]
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: string
                example: error
    post:
        summary: Creates and returns a new user
        responses:
          201:
            description: New user
            content:
              application/json:
                schema:
                  type: object
                  example: {"_id": "679e989ab30d21c6a7218f67","firstName": "Robert","lastName": "Allen","birthDate": "05/22/1998","email": "rallen@yahoo.com", "height": 68,"weight": 170}
          400:
            description: Bad request
            content:
              application/json:
                schema:
                  type: string
                  example: "Bad request. ValidationError: email: First name is a required field"
          500:
            description: Server error
            content:
              application/json:
                schema:
                  type: string
                  example: error
  /users/{id}:
    get:
      summary: Returns a single user with matching id
      parameters: 
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        200:
          description: Returned single user
          content:
            application/json:
              schema:
                type: object
                example: {"_id": "679e989ab30d21c6a7218f67","firstName": "Robert","lastName": "Allen","birthDate": "05/22/1998","email": "rallen@yahoo.com", "height": 68,"weight": 170}
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: string
                example: User not found
        500:
          description: Server error
          content:
            application/json:
              schema:
                type: string
                example: error
    put:
        summary: Updates and returns an existing user
        parameters: 
        - in: path
          name: id
          required: true
          schema:
            type: string
        responses:
          201:
            description: Updated user
            content:
              application/json:
                schema:
                  type: object
                  example: {"_id": "679e989ab30d21c6a7218f67","firstName": "Robert","lastName": "Allen","birthDate": "05/22/1998","email": "rallen@yahoo.com", "height": 68,"weight": 170}
          404:
            description: User not found
            content:
              application/json:
                schema:
                  type: string
                  example: User not found
          400:
            description: Bad request
            content:
              application/json:
                schema:
                  type: string
                  example: "Bad request. ValidationError: email: First name is a required field"
          500:
            description: Server error
            content:
              application/json:
                schema:
                  type: string
                  example: error
    delete:
        summary: Deletes an existing user
        parameters: 
        - in: path
          name: id
          required: true
          schema:
            type: string
        responses:
          200:
            description: Deleted user message
            content:
              application/json:
                schema:
                  type: string
                  example: User deleted successfully.
          404:
            description: User not found
            content:
              application/json:
                schema:
                  type: string
                  example: User not found
          500:
            description: Server error
            content:
              application/json:
                schema:
                  type: string
                  example: error
                